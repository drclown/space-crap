<?php

namespace Proxies\__CG__\Homesoft\MediaBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Media extends \Homesoft\MediaBundle\Entity\Media implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'id', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'title', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'synopsis', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'dateRelease', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'nationality', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'image', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'files', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'genres');
        }

        return array('__isInitialized__', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'id', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'title', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'synopsis', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'dateRelease', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'nationality', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'image', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'files', '' . "\0" . 'Homesoft\\MediaBundle\\Entity\\Media' . "\0" . 'genres');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Media $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setSynopsis($synopsis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSynopsis', array($synopsis));

        return parent::setSynopsis($synopsis);
    }

    /**
     * {@inheritDoc}
     */
    public function getSynopsis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSynopsis', array());

        return parent::getSynopsis();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateRelease($dateRelease)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateRelease', array($dateRelease));

        return parent::setDateRelease($dateRelease);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateRelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateRelease', array());

        return parent::getDateRelease();
    }

    /**
     * {@inheritDoc}
     */
    public function setNationality($nationality)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNationality', array($nationality));

        return parent::setNationality($nationality);
    }

    /**
     * {@inheritDoc}
     */
    public function getNationality()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNationality', array());

        return parent::getNationality();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage(\Homesoft\MediaBundle\Entity\Image $image = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', array($image));

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', array());

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function addGenre(\Homesoft\MediaBundle\Entity\Genre $genres)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGenre', array($genres));

        return parent::addGenre($genres);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGenre(\Homesoft\MediaBundle\Entity\Genre $genres)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGenre', array($genres));

        return parent::removeGenre($genres);
    }

    /**
     * {@inheritDoc}
     */
    public function getGenres()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGenres', array());

        return parent::getGenres();
    }

    /**
     * {@inheritDoc}
     */
    public function setFiles(\Homesoft\MediaBundle\Entity\File $files = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFiles', array($files));

        return parent::setFiles($files);
    }

    /**
     * {@inheritDoc}
     */
    public function getFiles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFiles', array());

        return parent::getFiles();
    }

}
